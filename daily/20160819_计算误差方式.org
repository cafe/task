- 计算误差方式:

  原来的uniArcLength()函数强制对整个Bezier曲线按弧长进行均分, 而且为了不出现首/末端点从一个segment跳动另一个segment的情况, 函数里默认不跳动. 事实上在划分段数非常多时, 跳动的点更多(不止是首/末端点, 与它们接近的点都可能会滑动到其它段里). 因此误差图就会有一个怪现象, 分的段数越多反而误差越大. 因此为避免这种情况, 有两种改善方法:

  1. 将每一小段(interval)对应的小段(section或segment)分成相同数目的小段(subsegment), 同一个section里的每个subsegment长度是相同的, 而不同section里的subsegment长度不同.
  2. Use normalized t value directly instead of dividing the segment according to arc length. 即t从0到1对应弧长0到s, 0.2就对应0.2s. 这种方式比较粗糙, 但在段数比较小的时候可以用来粗略地近似弧长, 因为该方法不会涉及到计算每段subsegment弧长(不会引入uniArcLengthOne函数中额外的计算误差), 故也是一个可行的方法. 但相比起来, 方法1更合理些.

- 方法1实现:

  + 改写uniArcLength()函数使其适应变化.
